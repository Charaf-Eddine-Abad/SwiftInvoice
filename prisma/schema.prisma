// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and ownership
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  defaultTaxRate    Float     @default(10) @map("default_tax_rate")
  defaultDiscount   Float     @default(0) @map("default_discount")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relationships
  clients           Client[]
  invoices          Invoice[]
  accounts          Account[]
  sessions          Session[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]
  recurringInvoices RecurringInvoice[]
  reminderPolicies  ReminderPolicy[]
  expenses          Expense[]
  organization      Organization?
  invoiceCustomization InvoiceCustomization?

  @@map("users")
}

// Client model for storing client information
model Client {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  email       String
  companyName String?  @map("company_name")
  address     String?
  taxId       String?  @map("tax_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  recurringInvoices RecurringInvoice[]

  @@map("clients")
}

// Invoice model for storing invoice information
model Invoice {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  clientId      String        @map("client_id")
  invoiceNumber String        @map("invoice_number")
  publicId      String?       @unique @default(cuid()) @map("public_id")
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @map("issue_date")
  dueDate       DateTime      @map("due_date")
  totalAmount   Decimal       @map("total_amount") @db.Decimal(10, 2)
  tax           Decimal       @default(0) @db.Decimal(10, 2)
  discount      Decimal       @default(0) @db.Decimal(10, 2)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]

  // Composite unique constraint: invoice number must be unique per user
  @@unique([userId, invoiceNumber])
  @@map("invoices")
}

// InvoiceItem model for storing individual invoice line items
model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String   @map("invoice_id")
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

// Enum for invoice status
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

// NextAuth adapter tables (required when using PrismaAdapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Email verification model for email verification codes
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// Password reset model for password reset codes
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// Phase 2 Models

// Recurring Invoice model for automated invoice generation
model RecurringInvoice {
  id            String              @id @default(cuid())
  userId        String              @map("user_id")
  clientId      String              @map("client_id")
  name          String
  description   String?
  frequency     RecurringFrequency
  interval      Int                 @default(1) // Every X weeks/months
  startDate     DateTime            @map("start_date")
  nextRunAt     DateTime            @map("next_run_at")
  isActive      Boolean             @default(true) @map("is_active")
  tax           Decimal             @default(0) @db.Decimal(10, 2)
  discount      Decimal             @default(0) @db.Decimal(10, 2)
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")

  // Relationships
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  lineItems    RecurringLineItem[]

  @@map("recurring_invoices")
}

// Recurring Line Item model for recurring invoice items
model RecurringLineItem {
  id                String          @id @default(cuid())
  recurringInvoiceId String         @map("recurring_invoice_id")
  description       String
  quantity          Decimal         @db.Decimal(10, 2)
  unitPrice         Decimal         @map("unit_price") @db.Decimal(10, 2)
  total             Decimal         @db.Decimal(10, 2)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  // Relationships
  recurringInvoice RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id], onDelete: Cascade)

  @@map("recurring_line_items")
}

// Reminder Policy model for automated invoice reminders
model ReminderPolicy {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  name              String
  reminderDays      Int[]    @map("reminder_days") // Days after due date to send reminders
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminder_policies")
}

// Expense model for expense tracking
model Expense {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  date        DateTime
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD")
  category    ExpenseCategory
  vendor      String
  description String
  receiptUrl  String?       @map("receipt_url")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

// Enums for Phase 2
enum RecurringFrequency {
  WEEKLY
  MONTHLY
}

enum ExpenseCategory {
  OFFICE_SUPPLIES
  TRAVEL
  MEALS
  SOFTWARE
  MARKETING
  PROFESSIONAL_SERVICES
  UTILITIES
  RENT
  EQUIPMENT
  OTHER
}

// Organization model for storing company/business details
model Organization {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  name        String
  industry    String?
  address     String?
  city        String?
  state       String?
  zipCode     String?  @map("zip_code")
  country     String?  @default("US")
  phone       String?
  email       String?
  website     String?
  taxId       String?  @map("tax_id")
  currency    String   @default("USD")
  timezone    String   @default("UTC")
  language    String   @default("en")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("organizations")
}

// Invoice Customization model for branding and design
model InvoiceCustomization {
  id              String   @id @default(cuid())
  userId          String   @unique @map("user_id")
  logoUrl         String?  @map("logo_url")
  primaryColor    String   @default("#2563eb") @map("primary_color")
  secondaryColor  String   @default("#1e40af") @map("secondary_color")
  accentColor     String   @default("#3b82f6") @map("accent_color")
  fontFamily      String   @default("Inter") @map("font_family")
  templateStyle   String   @default("modern") @map("template_style")
  showLogo        Boolean  @default(true) @map("show_logo")
  showCompanyInfo Boolean  @default(true) @map("show_company_info")
  footerText      String?  @map("footer_text")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoice_customizations")
}
