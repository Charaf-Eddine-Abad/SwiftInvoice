// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and ownership
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relationships
  clients           Client[]
  invoices          Invoice[]
  accounts          Account[]
  sessions          Session[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]

  @@map("users")
}

// Client model for storing client information
model Client {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  email       String
  companyName String?  @map("company_name")
  address     String?
  taxId       String?  @map("tax_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@map("clients")
}

// Invoice model for storing invoice information
model Invoice {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  clientId      String        @map("client_id")
  invoiceNumber String        @unique @map("invoice_number")
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @map("issue_date")
  dueDate       DateTime      @map("due_date")
  totalAmount   Decimal       @map("total_amount") @db.Decimal(10, 2)
  tax           Decimal       @default(0) @db.Decimal(10, 2)
  discount      Decimal       @default(0) @db.Decimal(10, 2)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]

  @@map("invoices")
}

// InvoiceItem model for storing individual invoice line items
model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String   @map("invoice_id")
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

// Enum for invoice status
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}

// NextAuth adapter tables (required when using PrismaAdapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Email verification model for email verification codes
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// Password reset model for password reset codes
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}
